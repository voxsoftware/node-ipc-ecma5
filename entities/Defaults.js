'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var os = require('os');

var Defaults = function Defaults() {
    _classCallCheck(this, Defaults);

    var IPType = os.networkInterfaces()[Object.keys(os.networkInterfaces())[0]][0].family;

    Object.defineProperties(this, {
        appspace: {
            enumerable: true,
            writable: true,
            value: 'app.'
        },
        socketRoot: {
            enumerable: true,
            writable: true,
            value: '/tmp/'
        },
        networkHost: {
            enumerable: true,
            writable: true,
            value: IPType == 'IPv6' ? '::1' : '127.0.0.1'
        },
        networkPort: {
            enumerable: true,
            writable: true,
            value: 8000
        },
        id: {
            enumerable: true,
            writable: true,
            value: os.hostname()
        },
        encoding: {
            enumerable: true,
            writable: true,
            value: 'utf8'
        },
        rawBuffer: {
            enumerable: true,
            writable: true,
            value: false
        },
        sync: {
            enumerable: true,
            writable: true,
            value: false
        },
        silent: {
            enumerable: true,
            writable: true,
            value: false
        },
        maxConnections: {
            enumerable: true,
            writable: true,
            value: 100
        },
        retry: {
            enumerable: true,
            writable: true,
            value: 500
        },
        maxRetries: {
            enumerable: true,
            writable: true,
            value: Infinity
        },
        stopRetrying: {
            enumerable: true,
            writable: true,
            value: false
        },
        IPType: {
            enumerable: true,
            writable: true,
            value: IPType
        },
        tls: {
            enumerable: true,
            writable: true,
            value: false
        }
    });
};

module.exports = Defaults;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL25vZGUtaXBjL2VudGl0aWVzL0RlZmF1bHRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsSUFBTSxLQUFLLFFBQVEsSUFBUixDQUFMOztJQUVBLFdBQ0YsU0FERSxRQUNGLEdBQWE7MEJBRFgsVUFDVzs7QUFDVCxRQUFNLFNBQU8sR0FBRyxpQkFBSCxHQUNULE9BQU8sSUFBUCxDQUFZLEdBQUcsaUJBQUgsRUFBWixFQUFvQyxDQUFwQyxDQURTLEVBRVgsQ0FGVyxFQUVSLE1BRlEsQ0FESjs7QUFLVCxXQUFPLGdCQUFQLENBQ0ksSUFESixFQUVJO0FBQ0ksa0JBQWtCO0FBQ2Qsd0JBQVcsSUFBWDtBQUNBLHNCQUFTLElBQVQ7QUFDQSxtQkFBTSxNQUFOO1NBSEo7QUFLQSxvQkFBa0I7QUFDZCx3QkFBVyxJQUFYO0FBQ0Esc0JBQVMsSUFBVDtBQUNBLG1CQUFNLE9BQU47U0FISjtBQUtBLHFCQUFrQjtBQUNkLHdCQUFXLElBQVg7QUFDQSxzQkFBUyxJQUFUO0FBQ0EsbUJBQU0sTUFBQyxJQUFRLE1BQVIsR0FBaUIsS0FBbEIsR0FBMEIsV0FBMUI7U0FIVjtBQUtBLHFCQUFrQjtBQUNkLHdCQUFXLElBQVg7QUFDQSxzQkFBUyxJQUFUO0FBQ0EsbUJBQU0sSUFBTjtTQUhKO0FBS0EsWUFBa0I7QUFDZCx3QkFBVyxJQUFYO0FBQ0Esc0JBQVMsSUFBVDtBQUNBLG1CQUFNLEdBQUcsUUFBSCxFQUFOO1NBSEo7QUFLQSxrQkFBa0I7QUFDZCx3QkFBVyxJQUFYO0FBQ0Esc0JBQVMsSUFBVDtBQUNBLG1CQUFNLE1BQU47U0FISjtBQUtBLG1CQUFrQjtBQUNkLHdCQUFXLElBQVg7QUFDQSxzQkFBUyxJQUFUO0FBQ0EsbUJBQU0sS0FBTjtTQUhKO0FBS0EsY0FBa0I7QUFDZCx3QkFBVyxJQUFYO0FBQ0Esc0JBQVMsSUFBVDtBQUNBLG1CQUFNLEtBQU47U0FISjtBQUtBLGdCQUFrQjtBQUNkLHdCQUFXLElBQVg7QUFDQSxzQkFBUyxJQUFUO0FBQ0EsbUJBQU0sS0FBTjtTQUhKO0FBS0Esd0JBQWtCO0FBQ2Qsd0JBQVcsSUFBWDtBQUNBLHNCQUFTLElBQVQ7QUFDQSxtQkFBTSxHQUFOO1NBSEo7QUFLQSxlQUFrQjtBQUNkLHdCQUFXLElBQVg7QUFDQSxzQkFBUyxJQUFUO0FBQ0EsbUJBQU0sR0FBTjtTQUhKO0FBS0Esb0JBQWtCO0FBQ2Qsd0JBQVcsSUFBWDtBQUNBLHNCQUFTLElBQVQ7QUFDQSxtQkFBTSxRQUFOO1NBSEo7QUFLQSxzQkFBa0I7QUFDZCx3QkFBVyxJQUFYO0FBQ0Esc0JBQVMsSUFBVDtBQUNBLG1CQUFNLEtBQU47U0FISjtBQUtBLGdCQUFrQjtBQUNkLHdCQUFXLElBQVg7QUFDQSxzQkFBUyxJQUFUO0FBQ0EsbUJBQU0sTUFBTjtTQUhKO0FBS0EsYUFBa0I7QUFDZCx3QkFBVyxJQUFYO0FBQ0Esc0JBQVMsSUFBVDtBQUNBLG1CQUFNLEtBQU47U0FISjtLQXpFUixFQUxTO0NBQWI7O0FBd0ZKLE9BQU8sT0FBUCxHQUFlLFFBQWYiLCJmaWxlIjoiRGVmYXVsdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcblxuY2xhc3MgRGVmYXVsdHN7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgY29uc3QgSVBUeXBlPW9zLm5ldHdvcmtJbnRlcmZhY2VzKClbXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhvcy5uZXR3b3JrSW50ZXJmYWNlcygpKVswXVxuICAgICAgICBdWzBdLmZhbWlseTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXBwc3BhY2UgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOnRydWUsXG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOnRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOidhcHAuJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc29ja2V0Um9vdCAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOnRydWUsXG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOnRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOicvdG1wLydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG5ldHdvcmtIb3N0ICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTp0cnVlLFxuICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTp0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTooSVBUeXBlPT0nSVB2NicpPyAnOjoxJyA6ICcxMjcuMC4wLjEnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBuZXR3b3JrUG9ydCAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6dHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6dHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ODAwMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaWQgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOnRydWUsXG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOnRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOm9zLmhvc3RuYW1lKClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVuY29kaW5nICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTp0cnVlLFxuICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTp0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTondXRmOCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJhd0J1ZmZlciAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTp0cnVlLFxuICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTp0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTpmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3luYyAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOnRydWUsXG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOnRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOmZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzaWxlbnQgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6dHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6dHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1heENvbm5lY3Rpb25zICA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTp0cnVlLFxuICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTp0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZToxMDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJldHJ5ICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTp0cnVlLFxuICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTp0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTo1MDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1heFJldHJpZXMgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTp0cnVlLFxuICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTp0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTpJbmZpbml0eVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RvcFJldHJ5aW5nICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOnRydWUsXG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOnRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOmZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBJUFR5cGUgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6dHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6dHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6SVBUeXBlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0bHMgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6dHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6dHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cz1EZWZhdWx0cztcbiJdfQ==