/*global describe, expect, it*/
'use strict';

var ipc = require('../../../../node-ipc');

describe('UDP Socket verification.', function UDPSocketSpec() {
    it('Verify UDP server of type udp4 connects to UDP server named "udp4Server" and receives message.', function testIt(done) {
        ipc.config.networkPort = 8095;
        ipc.config.id = 'testClient';
        ipc.config.retry = 600;

        var clientPort = 8001;

        ipc.serveNet(clientPort, 'udp4', function serverStarted() {
            ipc.server.on('message', function gotMessage(data, socket) {
                expect(socket).toBeDefined();
                expect(data.id).toBe('udpServer');
                expect(data.message).toBe('I am UDP4 server!');
                testDone();
            });

            ipc.server.on('error', function gotErr(err) {
                expect(err).toBe(false);
                testDone();
            });

            ipc.server.emit({
                address: 'localhost',
                port: ipc.config.networkPort
            }, 'message', {
                id: ipc.config.id,
                message: 'I am testClient'
            });
        });

        function testDone() {
            ipc.server.stop();
            done();
        }

        ipc.server.start();
    });

    it('Verify UDP server of type udp6 connects to UDP server named "udp6Server" and receives message.', function testIt(done) {
        ipc.config.networkPort = 8099;
        ipc.config.id = 'testClient';
        ipc.config.retry = 600;

        var clientPort = 8010;

        ipc.serveNet('::1', clientPort, 'udp6', function serverStarted() {
            ipc.server.on('message', function gotMessage(data, socket) {
                expect(socket).toBeDefined();
                expect(data.id).toBe('udp6Server');
                expect(data.message).toBe('I am UDP6 server!');
                testDone();
            });

            ipc.server.on('error', function gotErr(err) {
                expect(err).toBe(false);
                testDone();
            });

            ipc.server.emit({
                address: '::1',
                port: ipc.config.networkPort
            }, 'message', {
                id: ipc.config.id,
                message: 'I am testClient'
            });
        });

        function testDone() {
            ipc.server.stop();
            done();
        }

        ipc.server.start();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25vZGUtaXBjL3NwZWMvc3VwcG9ydC9qYXNtaW5lVGVzdC9VRFAvdWRwU29ja2V0Q2xpZW50LnNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBOztBQUVBLElBQU0sTUFBTSxRQUFRLHNCQUFSLENBQU47O0FBRU4sU0FDSSwwQkFESixFQUVLLFNBQVMsYUFBVCxHQUF3QjtBQUNwQixPQUNHLGdHQURILEVBRUcsU0FBUyxNQUFULENBQWdCLElBQWhCLEVBQXFCO0FBQ2pCLFlBQUksTUFBSixDQUFXLFdBQVgsR0FBdUIsSUFBdkIsQ0FEaUI7QUFFakIsWUFBSSxNQUFKLENBQVcsRUFBWCxHQUFlLFlBQWYsQ0FGaUI7QUFHakIsWUFBSSxNQUFKLENBQVcsS0FBWCxHQUFtQixHQUFuQixDQUhpQjs7QUFLakIsWUFBSSxhQUFXLElBQVgsQ0FMYTs7QUFPakIsWUFBSSxRQUFKLENBQ0ksVUFESixFQUVJLE1BRkosRUFHSSxTQUFTLGFBQVQsR0FBd0I7QUFDcEIsZ0JBQUksTUFBSixDQUFXLEVBQVgsQ0FDSSxTQURKLEVBRUksU0FBUyxVQUFULENBQW9CLElBQXBCLEVBQXlCLE1BQXpCLEVBQWdDO0FBQzVCLHVCQUFPLE1BQVAsRUFBZSxXQUFmLEdBRDRCO0FBRTVCLHVCQUFPLEtBQUssRUFBTCxDQUFQLENBQWdCLElBQWhCLENBQXFCLFdBQXJCLEVBRjRCO0FBRzVCLHVCQUFPLEtBQUssT0FBTCxDQUFQLENBQXFCLElBQXJCLENBQTBCLG1CQUExQixFQUg0QjtBQUk1QiwyQkFKNEI7YUFBaEMsQ0FGSixDQURvQjs7QUFXcEIsZ0JBQUksTUFBSixDQUFXLEVBQVgsQ0FDSSxPQURKLEVBRUksU0FBUyxNQUFULENBQWdCLEdBQWhCLEVBQW9CO0FBQ2hCLHVCQUFPLEdBQVAsRUFBWSxJQUFaLENBQWlCLEtBQWpCLEVBRGdCO0FBRWhCLDJCQUZnQjthQUFwQixDQUZKLENBWG9COztBQW1CcEIsZ0JBQUksTUFBSixDQUFXLElBQVgsQ0FDSTtBQUNJLHlCQUFVLFdBQVY7QUFDQSxzQkFBVSxJQUFJLE1BQUosQ0FBVyxXQUFYO2FBSGxCLEVBS0ksU0FMSixFQU1JO0FBQ0ksb0JBQVUsSUFBSSxNQUFKLENBQVcsRUFBWDtBQUNWLHlCQUFVLGlCQUFWO2FBUlIsRUFuQm9CO1NBQXhCLENBSEosQ0FQaUI7O0FBMkNqQixpQkFBUyxRQUFULEdBQW1CO0FBQ2YsZ0JBQUksTUFBSixDQUFXLElBQVgsR0FEZTtBQUVmLG1CQUZlO1NBQW5COztBQUtBLFlBQUksTUFBSixDQUFXLEtBQVgsR0FoRGlCO0tBQXJCLENBRkgsQ0FEb0I7O0FBdURwQixPQUNHLGdHQURILEVBRUcsU0FBUyxNQUFULENBQWdCLElBQWhCLEVBQXFCO0FBQ2pCLFlBQUksTUFBSixDQUFXLFdBQVgsR0FBdUIsSUFBdkIsQ0FEaUI7QUFFakIsWUFBSSxNQUFKLENBQVcsRUFBWCxHQUFlLFlBQWYsQ0FGaUI7QUFHakIsWUFBSSxNQUFKLENBQVcsS0FBWCxHQUFtQixHQUFuQixDQUhpQjs7QUFLakIsWUFBSSxhQUFXLElBQVgsQ0FMYTs7QUFPakIsWUFBSSxRQUFKLENBQ0ksS0FESixFQUVJLFVBRkosRUFHSSxNQUhKLEVBSUksU0FBUyxhQUFULEdBQXdCO0FBQ3BCLGdCQUFJLE1BQUosQ0FBVyxFQUFYLENBQ0ksU0FESixFQUVJLFNBQVMsVUFBVCxDQUFvQixJQUFwQixFQUF5QixNQUF6QixFQUFnQztBQUM1Qix1QkFBTyxNQUFQLEVBQWUsV0FBZixHQUQ0QjtBQUU1Qix1QkFBTyxLQUFLLEVBQUwsQ0FBUCxDQUFnQixJQUFoQixDQUFxQixZQUFyQixFQUY0QjtBQUc1Qix1QkFBTyxLQUFLLE9BQUwsQ0FBUCxDQUFxQixJQUFyQixDQUEwQixtQkFBMUIsRUFINEI7QUFJNUIsMkJBSjRCO2FBQWhDLENBRkosQ0FEb0I7O0FBV3BCLGdCQUFJLE1BQUosQ0FBVyxFQUFYLENBQ0ksT0FESixFQUVJLFNBQVMsTUFBVCxDQUFnQixHQUFoQixFQUFvQjtBQUNoQix1QkFBTyxHQUFQLEVBQVksSUFBWixDQUFpQixLQUFqQixFQURnQjtBQUVoQiwyQkFGZ0I7YUFBcEIsQ0FGSixDQVhvQjs7QUFtQnBCLGdCQUFJLE1BQUosQ0FBVyxJQUFYLENBQ0k7QUFDSSx5QkFBVSxLQUFWO0FBQ0Esc0JBQVUsSUFBSSxNQUFKLENBQVcsV0FBWDthQUhsQixFQUtJLFNBTEosRUFNSTtBQUNJLG9CQUFVLElBQUksTUFBSixDQUFXLEVBQVg7QUFDVix5QkFBVSxpQkFBVjthQVJSLEVBbkJvQjtTQUF4QixDQUpKLENBUGlCOztBQTRDakIsaUJBQVMsUUFBVCxHQUFtQjtBQUNmLGdCQUFJLE1BQUosQ0FBVyxJQUFYLEdBRGU7QUFFZixtQkFGZTtTQUFuQjs7QUFLQSxZQUFJLE1BQUosQ0FBVyxLQUFYLEdBakRpQjtLQUFyQixDQUZILENBdkRvQjtDQUF4QixDQUZMIiwiZmlsZSI6InVkcFNvY2tldENsaWVudC5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgZGVzY3JpYmUsIGV4cGVjdCwgaXQqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpcGMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9ub2RlLWlwYycpO1xuXG5kZXNjcmliZShcbiAgICAnVURQIFNvY2tldCB2ZXJpZmljYXRpb24uJyxcbiAgICAgZnVuY3Rpb24gVURQU29ja2V0U3BlYygpe1xuICAgICAgICAgaXQoXG4gICAgICAgICAgICAnVmVyaWZ5IFVEUCBzZXJ2ZXIgb2YgdHlwZSB1ZHA0IGNvbm5lY3RzIHRvIFVEUCBzZXJ2ZXIgbmFtZWQgXCJ1ZHA0U2VydmVyXCIgYW5kIHJlY2VpdmVzIG1lc3NhZ2UuJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIHRlc3RJdChkb25lKXtcbiAgICAgICAgICAgICAgICBpcGMuY29uZmlnLm5ldHdvcmtQb3J0PTgwOTU7XG4gICAgICAgICAgICAgICAgaXBjLmNvbmZpZy5pZCA9J3Rlc3RDbGllbnQnO1xuICAgICAgICAgICAgICAgIGlwYy5jb25maWcucmV0cnkgPSA2MDA7XG5cbiAgICAgICAgICAgICAgICBsZXQgY2xpZW50UG9ydD04MDAxO1xuXG4gICAgICAgICAgICAgICAgaXBjLnNlcnZlTmV0KFxuICAgICAgICAgICAgICAgICAgICBjbGllbnRQb3J0LFxuICAgICAgICAgICAgICAgICAgICAndWRwNCcsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNlcnZlclN0YXJ0ZWQoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlwYy5zZXJ2ZXIub24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdvdE1lc3NhZ2UoZGF0YSxzb2NrZXQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc29ja2V0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QoZGF0YS5pZCkudG9CZSgndWRwU2VydmVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChkYXRhLm1lc3NhZ2UpLnRvQmUoJ0kgYW0gVURQNCBzZXJ2ZXIhJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3REb25lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaXBjLnNlcnZlci5vbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdvdEVycihlcnIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QoZXJyKS50b0JlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdERvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpcGMuc2VydmVyLmVtaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzIDogJ2xvY2FsaG9zdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQgICAgOiBpcGMuY29uZmlnLm5ldHdvcmtQb3J0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCAgICAgIDogaXBjLmNvbmZpZy5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA6ICdJIGFtIHRlc3RDbGllbnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0ZXN0RG9uZSgpe1xuICAgICAgICAgICAgICAgICAgICBpcGMuc2VydmVyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlwYy5zZXJ2ZXIuc3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAgaXQoXG4gICAgICAgICAgICAnVmVyaWZ5IFVEUCBzZXJ2ZXIgb2YgdHlwZSB1ZHA2IGNvbm5lY3RzIHRvIFVEUCBzZXJ2ZXIgbmFtZWQgXCJ1ZHA2U2VydmVyXCIgYW5kIHJlY2VpdmVzIG1lc3NhZ2UuJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIHRlc3RJdChkb25lKXtcbiAgICAgICAgICAgICAgICBpcGMuY29uZmlnLm5ldHdvcmtQb3J0PTgwOTk7XG4gICAgICAgICAgICAgICAgaXBjLmNvbmZpZy5pZCA9J3Rlc3RDbGllbnQnO1xuICAgICAgICAgICAgICAgIGlwYy5jb25maWcucmV0cnkgPSA2MDA7XG5cbiAgICAgICAgICAgICAgICBsZXQgY2xpZW50UG9ydD04MDEwO1xuXG4gICAgICAgICAgICAgICAgaXBjLnNlcnZlTmV0KFxuICAgICAgICAgICAgICAgICAgICAnOjoxJyxcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50UG9ydCxcbiAgICAgICAgICAgICAgICAgICAgJ3VkcDYnLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXJ2ZXJTdGFydGVkKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpcGMuc2VydmVyLm9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnb3RNZXNzYWdlKGRhdGEsc29ja2V0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHNvY2tldCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KGRhdGEuaWQpLnRvQmUoJ3VkcDZTZXJ2ZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KGRhdGEubWVzc2FnZSkudG9CZSgnSSBhbSBVRFA2IHNlcnZlciEnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdERvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpcGMuc2VydmVyLm9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ290RXJyKGVycil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChlcnIpLnRvQmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0RG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlwYy5zZXJ2ZXIuZW1pdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgOiAnOjoxJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9ydCAgICA6IGlwYy5jb25maWcubmV0d29ya1BvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkICAgICAgOiBpcGMuY29uZmlnLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlIDogJ0kgYW0gdGVzdENsaWVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRlc3REb25lKCl7XG4gICAgICAgICAgICAgICAgICAgIGlwYy5zZXJ2ZXIuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaXBjLnNlcnZlci5zdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICB9XG4pO1xuIl19